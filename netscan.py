#!/usr/bin/env python3

import scapy.all as scapy
import argparse
#import nmap
import socket
import sys
from datetime import datetime

def get_arguments():
	parser = argparse.ArgumentParser()
	parser.add_argument("-t", "--target", dest="target", help="Target IP / IP range")
	options = parser.parse_args()
	if not options.target:
		parser.error("[-] Please specify target IP or IP range, use --help for more info")
	return options

def scan(ip):
	arp_request = scapy.ARP(pdst=ip)
	broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
	arp_request_broadcast = broadcast/arp_request #Appending both the packets using / in scapy
	answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0] #Sending the arp packet and recieving only the answered packets

	clients_list = []
	for element in answered_list:
		client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
		clients_list.append(client_dict)
	return clients_list
		
def portscan():
	target = socket.gethostbyname(input("Enter the ip: "))
	print("-" * 50)
	print("Scanning Target: " + target)
	print("Scanning started at:" + str(datetime.now()))
	print("-" * 50)
	services = []
	#nmap = nmap.Nmap()
	#s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	
	try:
		
		# will scan ports between 1 to 65,535
		for port in range(1,65536):
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			socket.setdefaulttimeout(0.0001)
			result = s.connect_ex((target,port))
			if result ==0:
				print("Port {} is open ".format(port))
				services.append(port)
			
			
			#service = None
			#counter = 1
			# returns an error indicator
			
				#continue
		#print(services)
		for i in services:
			try:
				print(i,"Runs, service:",socket.getservbyport(int(i),'tcp'))
			except socket.error:
				print(i,"Runs, service: Undetermined")
				continue
				#servicedec.append(port)
			#s.close()
			
			s.close()
			

	except KeyboardInterrupt:
			print("\n Exitting Program !!!!")
			sys.exit()
	except socket.gaierror:
			print("\n Hostname Could Not Be Resolved !!!!")
			sys.exit()
	except socket.error:
			print("\nServer not responding !!!!")
			sys.exit()

def print_result(result_list):
	print("IP\t\t\tMac Address\n--------------------------------------------")
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	for client in result_list:
		print(client["ip"] + "\t\t" + client["mac"])
	ans = input("Do you want to run port scan on the detected ip addresses (y/n)")
	if ans == "y":
		portscan()
	else:
		sys.exit()
		

def abc():
	options = get_arguments()
	scan_result = scan(options.target)
	print_result(scan_result)
